CCS PCM C Compiler, Version 4.074, 38112               31-may-15 14:08

               Filename: D:\Tutorial\CCS\ADC\ADC.lst

               ROM used: 414 words (5%)
                         Largest free fragment is 2048
               RAM used: 10 (3%) at main() level
                         21 (6%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   154
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC  = 8  // 8bits el ADC 
.................... #fuses HS         // HS por que utilizaremos un crystal de  20MHz 
.................... #use delay (clock=20M) 
*
0022:  MOVLW  27
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   035
0028:  MOVLW  06
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  7B
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 00,F
0034:  GOTO   028
0035:  RETLW  00
.................... #define LCD_RS    PIN_D2 
.................... #define LCD_E     PIN_D3 
.................... #define LCD_DB4   PIN_D4 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
.................... #include <lcd1.c> 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0036:  BTFSC  2E.0
0037:  GOTO   03A
0038:  BCF    08.4
0039:  GOTO   03B
003A:  BSF    08.4
003B:  BSF    03.5
003C:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
003D:  BCF    03.5
003E:  BTFSC  2E.1
003F:  GOTO   042
0040:  BCF    08.5
0041:  GOTO   043
0042:  BSF    08.5
0043:  BSF    03.5
0044:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
0045:  BCF    03.5
0046:  BTFSC  2E.2
0047:  GOTO   04A
0048:  BCF    08.6
0049:  GOTO   04B
004A:  BSF    08.6
004B:  BSF    03.5
004C:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
004D:  BCF    03.5
004E:  BTFSC  2E.3
004F:  GOTO   052
0050:  BCF    08.7
0051:  GOTO   053
0052:  BSF    08.7
0053:  BSF    03.5
0054:  BCF    08.7
....................  
....................  delay_cycles(1); 
0055:  NOP
....................  output_high(LCD_E); 
0056:  BCF    08.3
0057:  BCF    03.5
0058:  BSF    08.3
....................  delay_us(2); 
0059:  MOVLW  03
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
....................  output_low(LCD_E); 
005D:  BSF    03.5
005E:  BCF    08.3
005F:  BCF    03.5
0060:  BCF    08.3
.................... } 
0061:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0062:  BSF    03.5
0063:  BCF    08.2
0064:  BCF    03.5
0065:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0066:  MOVLW  63
0067:  MOVWF  77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  GOTO   06B
.................... #endif 
....................  
.................... if(address) 
006B:  MOVF   2B,F
006C:  BTFSC  03.2
006D:  GOTO   073
....................    output_high(LCD_RS); 
006E:  BSF    03.5
006F:  BCF    08.2
0070:  BCF    03.5
0071:  BSF    08.2
.................... else 
0072:  GOTO   077
....................    output_low(LCD_RS); 
0073:  BSF    03.5
0074:  BCF    08.2
0075:  BCF    03.5
0076:  BCF    08.2
....................  
....................  delay_cycles(1); 
0077:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0078:  BSF    03.5
0079:  BCF    08.3
007A:  BCF    03.5
007B:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4); 
007C:  SWAPF  2C,W
007D:  MOVWF  2D
007E:  MOVLW  0F
007F:  ANDWF  2D,F
0080:  MOVF   2D,W
0081:  MOVWF  2E
0082:  CALL   036
.................... lcd_send_nibble(n & 0xf); 
0083:  MOVF   2C,W
0084:  ANDLW  0F
0085:  MOVWF  2D
0086:  MOVWF  2E
0087:  CALL   036
.................... } 
0088:  RETLW  00
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0089:  BSF    03.5
008A:  BCF    08.2
008B:  BCF    03.5
008C:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
008D:  BSF    03.5
008E:  BCF    08.3
008F:  BCF    03.5
0090:  BCF    08.3
....................  
.................... delay_ms(15); 
0091:  MOVLW  0F
0092:  MOVWF  27
0093:  CALL   022
....................  
.................... for(i=0 ;i < 3; i++) 
0094:  CLRF   22
0095:  MOVF   22,W
0096:  SUBLW  02
0097:  BTFSS  03.0
0098:  GOTO   0A1
....................    { 
....................     lcd_send_nibble(0x03); 
0099:  MOVLW  03
009A:  MOVWF  2E
009B:  CALL   036
....................     delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  27
009E:  CALL   022
....................    } 
009F:  INCF   22,F
00A0:  GOTO   095
....................  
.................... lcd_send_nibble(0x02); 
00A1:  MOVLW  02
00A2:  MOVWF  2E
00A3:  CALL   036
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00A4:  CLRF   22
00A5:  MOVF   22,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B5
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00A9:  MOVF   22,W
00AA:  CALL   004
00AB:  MOVWF  23
00AC:  CLRF   2B
00AD:  MOVF   23,W
00AE:  MOVWF  2C
00AF:  CALL   062
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  27
00B2:  CALL   022
....................     #endif 
....................    } 
00B3:  INCF   22,F
00B4:  GOTO   0A5
....................  
.................... } 
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   16E (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
00D3:  DECFSZ 28,W
00D4:  GOTO   0D6
00D5:  GOTO   0D9
....................    address = lcd_line_two; 
00D6:  MOVLW  40
00D7:  MOVWF  29
.................... else 
00D8:  GOTO   0DA
....................    address=0; 
00D9:  CLRF   29
....................  
.................... address += x-1; 
00DA:  MOVLW  01
00DB:  SUBWF  27,W
00DC:  ADDWF  29,F
.................... lcd_send_byte(0, 0x80 | address); 
00DD:  MOVF   29,W
00DE:  IORLW  80
00DF:  MOVWF  2A
00E0:  CLRF   2B
00E1:  MOVF   2A,W
00E2:  MOVWF  2C
00E3:  CALL   062
.................... } 
00E4:  RETLW  00
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
00E5:  MOVF   26,W
00E6:  XORLW  0C
00E7:  BTFSC  03.2
00E8:  GOTO   0F0
00E9:  XORLW  06
00EA:  BTFSC  03.2
00EB:  GOTO   0F8
00EC:  XORLW  02
00ED:  BTFSC  03.2
00EE:  GOTO   0FE
00EF:  GOTO   103
....................     case '\f': 
....................       lcd_send_byte(0,1); 
00F0:  CLRF   2B
00F1:  MOVLW  01
00F2:  MOVWF  2C
00F3:  CALL   062
....................       delay_ms(2); 
00F4:  MOVLW  02
00F5:  MOVWF  27
00F6:  CALL   022
....................       break; 
00F7:  GOTO   109
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
00F8:  MOVLW  01
00F9:  MOVWF  27
00FA:  MOVLW  02
00FB:  MOVWF  28
00FC:  CALL   0D3
....................        break; 
00FD:  GOTO   109
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
00FE:  CLRF   2B
00FF:  MOVLW  10
0100:  MOVWF  2C
0101:  CALL   062
....................        break; 
0102:  GOTO   109
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0103:  MOVLW  01
0104:  MOVWF  2B
0105:  MOVF   26,W
0106:  MOVWF  2C
0107:  CALL   062
....................        break; 
0108:  GOTO   109
....................    } 
.................... } 
0109:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
.................... int8 valor,valor1; 
.................... char Leer_ADC(char canal){ 
....................    char dato; 
....................       SET_ADC_CHANNEL(canal); 
*
00B8:  RLF    22,W
00B9:  MOVWF  77
00BA:  RLF    77,F
00BB:  RLF    77,F
00BC:  MOVLW  F8
00BD:  ANDWF  77,F
00BE:  MOVF   1F,W
00BF:  ANDLW  C7
00C0:  IORWF  77,W
00C1:  MOVWF  1F
....................       delay_us(20); 
00C2:  MOVLW  21
00C3:  MOVWF  77
00C4:  DECFSZ 77,F
00C5:  GOTO   0C4
....................       dato=READ_ADC(); 
00C6:  BSF    1F.2
00C7:  BTFSC  1F.2
00C8:  GOTO   0C7
00C9:  MOVF   1E,W
00CA:  MOVWF  23
....................       delay_us(10); 
00CB:  MOVLW  10
00CC:  MOVWF  77
00CD:  DECFSZ 77,F
00CE:  GOTO   0CD
00CF:  NOP
....................       return dato; 
00D0:  MOVF   23,W
00D1:  MOVWF  78
.................... } 
00D2:  RETLW  00
.................... void main(){ 
*
0154:  CLRF   04
0155:  BCF    03.7
0156:  MOVLW  1F
0157:  ANDWF  03,F
0158:  BSF    03.5
0159:  BSF    1F.0
015A:  BSF    1F.1
015B:  BSF    1F.2
015C:  BCF    1F.3
015D:  MOVLW  07
015E:  MOVWF  1C
....................    SETUP_ADC(ADC_CLOCK_INTERNAL);    
015F:  BCF    1F.6
0160:  BCF    03.5
0161:  BSF    1F.6
0162:  BSF    1F.7
0163:  BSF    03.5
0164:  BCF    1F.7
0165:  BCF    03.5
0166:  BSF    1F.0
....................    SETUP_ADC_PORTS(ALL_ANALOG); 
0167:  BSF    03.5
0168:  BCF    1F.0
0169:  BCF    1F.1
016A:  BCF    1F.2
016B:  BCF    1F.3
....................    lcd_init(); 
016C:  BCF    03.5
016D:  GOTO   089
....................     
....................    while(TRUE){ 
....................       valor = Leer_ADC(0); 
016E:  CLRF   22
016F:  CALL   0B8
0170:  MOVF   78,W
0171:  MOVWF  20
....................       valor1 = Leer_ADC(1); 
0172:  MOVLW  01
0173:  MOVWF  22
0174:  CALL   0B8
0175:  MOVF   78,W
0176:  MOVWF  21
....................       lcd_gotoxy(1,1); 
0177:  MOVLW  01
0178:  MOVWF  27
0179:  MOVWF  28
017A:  CALL   0D3
....................       printf(lcd_putc,"AN0=%03u-AN1=%03u",valor,valor1); 
017B:  CLRF   22
017C:  MOVF   22,W
017D:  CALL   00C
017E:  INCF   22,F
017F:  MOVWF  77
0180:  MOVWF  26
0181:  CALL   0E5
0182:  MOVLW  04
0183:  SUBWF  22,W
0184:  BTFSS  03.2
0185:  GOTO   17C
0186:  MOVF   20,W
0187:  MOVWF  24
0188:  MOVLW  03
0189:  MOVWF  25
018A:  CALL   11F
018B:  MOVLW  08
018C:  MOVWF  23
018D:  MOVF   23,W
018E:  CALL   00C
018F:  INCF   23,F
0190:  MOVWF  77
0191:  MOVWF  26
0192:  CALL   0E5
0193:  MOVLW  0D
0194:  SUBWF  23,W
0195:  BTFSS  03.2
0196:  GOTO   18D
0197:  MOVF   21,W
0198:  MOVWF  24
0199:  MOVLW  03
019A:  MOVWF  25
019B:  CALL   11F
....................     
....................        
....................    } 
019C:  GOTO   16E
....................     
.................... } 
019D:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
